#!/usr/bin/env bash

# Sometimes we could have git errors and instead of barreling on,
# we need to fail before error handling supports it.
set -e

USAGE="<COMMAND> [FLAGS] <pr_branch>

Generate code-review branch that has been resolved against a base branch.

Commands:
  start        generate the code-review branch and resolve it against a base branch

         Flags:
           -b <branch>, --base <branch>   The base branch that the pull request will be merged into
                                          default: master

           --remote <remote>              Pull from the remote when updating the base and
                                          pull-request branchs before branch resolution
                                          (Same as calling --base-remote and --pr-remote with the same value)
                                          default: origin

           --base-remote <remote>         Pull from the remote when updating the base
                                          branch before branch resolution
                                          default: origin

           --pr-remote <remote>           Pull from the remote when updating the
                                          pull-request branch before branch resolution
                                          default: origin

           --resolve-method METHOD        Use METHOD to resolve the differences between
                                          the base and pull-request branches
                                          Possible methods are as follows:
                                          default: rebase

                                          rebase    reapply the pull-requests commits on top
                                                    of the base branch's tip
                                          merge     attempt to merge the pull-requests branch
                                                    into master

  finish       remove the current code-review branch
  clear        remove all of the code-review branches
  "

source "$(git --exec-path)/git-sh-setup"

function fetch() {
    git fetch "${1}"
}

function branch_exists() {
    git rev-parse --verify "$1" > /dev/null 2>&1
    return
}

function clear_all() {
    for branch in $(git branch); do
        if [[ $branch == *"code-review/"* ]]; then
            git branch -D $branch
        fi
    done
}

function start_code_review() {

    local base_branch="$(git config code-review.base-branch || echo -n 'master')"
    local base_remote="$(git config code-review.base-remote || echo -n 'origin')"
    local pr_branch=""
    local pr_remote="$(git config code-review.pr-remote     || echo ${base_remote})"
    local branch_resolution_command="rebase"

    while [ $# -gt 0 ]; do
        case $1 in
            -b | --base)
                base_branch="$2"
                shift 2
                ;;
            --remote)
                base_remote="$2"
                pr_remote="$2"
                shift 2
                ;;
            --base-remote)
                base_remote="$2"
                shift 2
                ;;
            --pr-remote)
                pr_remote="$2"
                shift 2
                ;;
            --resolve-method)
                branch_resolution_command="$2"
                shift 2
                ;;
            *)
                pr_branch="$1"
                shift
                ;;
        esac
    done

    # FIXME: The resolve method should be checked to make sure that it is either 'merge' or 'rebase'

    # Need to make sure the user actually passed in a branch or else we'll fall apart
    if [ -z ${pr_branch} ]; then
        echo "No branch name was specified!"
        usage
        die
    fi

    local merge_request_branch="code-review/${pr_branch}"
    require_work_tree_exists
    cd_to_toplevel
    require_clean_work_tree "rebase" "Please commit or stash changes."
    if branch_exists "${merge_request_branch}"; then
        echo "${merge_request_branch} already exists. Please delete or checkout."
        die
    fi

    fetch "${base_remote}"

    # Save the extra fetch
    if [ ! "${pr_remote}" != "${base_remote}" ]; then
        fetch "${pr_remote}"
    fi

    echo "git branch '${merge_request_branch}' '${pr_branch}'"
    git branch "${merge_request_branch}" "${pr_branch}"
    git checkout "${merge_request_branch}"
    git branch --unset-upstream

    git $branch_resolution_command "${base_branch}"
    echo "${merge_request_branch} created. Remember to delete the branch when you are finished."
}

function clean_up_current_branch() {
    local current_branch="$(git rev-parse --abbrev-ref HEAD)"
    local base_branch="$(git config code-review.base-branch || echo -n 'master')"
    if [[ $current_branch != *"code-review/"* ]]; then
        echo "current branch was not created by git code-review"
        return 1
    fi

    git checkout ${base_branch}
    git branch -D ${current_branch}
}

function main() {
    case "$1" in
        "clear")
            shift 1
            clear_all "$@"
            ;;
        "start")
            shift 1
            start_code_review "$@"
            ;;
        "finish")
            clean_up_current_branch
            ;;
        *)
            usage
    esac
}


main "$@"
